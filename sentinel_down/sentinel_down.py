# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SentinelDownloader
                                 A QGIS plugin
 This plugin is done to download Sentinel 1 data based on a few criterias
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-23
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Malak IRJA - Ilyasse Boussiar
        email                : irjamalak@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate
from PyQt5 import QtGui
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sentinel_down_dialog import SentinelDownloaderDialog
import os.path

#importing sentinelsat package python
from sentinelsat import SentinelAPI, read_geojson, geojson_to_wkt
from datetime import date


class SentinelDownloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SentinelDownloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sentinel1 Downloader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SentinelDownloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sentinel_down/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Download Sentinel 1 satellite images'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Sentinel1 Downloader'),
                action)
            self.iface.removeToolBarIcon(action)

    def downloadImage(self,id_image):
        api = SentinelAPI('Akarena', '123654789', 'https://scihub.copernicus.eu/dhus')
        api.download(id_image, directory_path='C:/Users/home/Desktop/hihi', checksum=True)

    def on_clicked(self,index):

        api = SentinelAPI('Akarena', '123654789', 'https://scihub.copernicus.eu/dhus')

        #Getting the satellite image id from the value of the selected line in the list
        sat_info = self.dlg.listView.model().itemData(index).get(0).split()
        id_image = sat_info[1]

        #Download the preview image
        lol = api.download_quicklook(id_image, directory_path='C:/Users/home/Desktop/hihi')
        pixmap = QtGui.QPixmap(lol.get('path'))
        self.dlg.preview_img.setPixmap(pixmap)

        #Showing metadata
        self.dlg.label_metadata.setText(
            "Title:\t" + lol.get('title')+'\n'
            "Size:\t" + str(format(lol.get('size')/1e9,'.2f'))+'\n'
            "Url:\t" + lol.get('url')+" GB"+'\n'
            "Creation Date:\t" + str(lol.get('Creation Date'))+'\n'
            "Creation Date:\t" + str(lol.get('Ingestion Date'))+'\n'
        )

        #When clicking on download, it downloads that selected image
        self.dlg.down_btn.clicked.connect(lambda:self.downloadImage(id_image))



    def searchList(self): 
        #Connect with the API
        api = SentinelAPI('Akarena', '123654789', 'https://scihub.copernicus.eu/dhus') 

        #Getting the longitude and latitude of the point that represents the region, and transforming it into a WKT format
        longitude = self.dlg.long_edit.text()
        latitude = self.dlg.lat_edit.text()
        query_area = "POINT ("+longitude+" "+latitude+")"

        #Getting the date interval at which the satellite images where shot
        start_Date = self.dlg.start_Edit.date().toString("yyyyMMdd")
        end_Date = self.dlg.end_Edit.date().toString("yyyyMMdd")

        #Forming the research query, with the area specified as that previous point, the date interval defined as a list
        # the area relation specified as an Intersection, and the satellite picked is Sentinel-1 (Radar)
        products = api.query(area=query_area, date=(start_Date, end_Date),area_relation='Intersects',platformname='Sentinel-1',limit=100)
        number = api.count(area=query_area, date=(start_Date, end_Date),area_relation='Intersects',platformname='Sentinel-1')

        #Detecting the number of satellite images found that respect the creterias, and turning the products into a dictionary
        self.dlg.result_label.setText(str(number)+" Résultats trouvées")
        a = dict(products)

        #Define model for the list view to add the found satellite images
        model = QtGui.QStandardItemModel()
        self.dlg.listView.setModel(model)
        
    
        #Add the title and the id of the satellite images to the listview
        for uuid, image_data in a.items():
            if (api.is_online(uuid)):
                item = QtGui.QStandardItem(image_data['title']+' '+uuid)
                model.appendRow(item)

        #When you select one element of the list, the function on_clicked is triggered
        self.dlg.listView.clicked[QtCore.QModelIndex].connect(self.on_clicked)
        
    

        
    
    




        
    def run(self):
        """Run method that performs all the real work"""
        api = SentinelAPI('Akarena', '123654789', 'https://scihub.copernicus.eu/dhus')
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SentinelDownloaderDialog()
            self.dlg.search_Button.clicked.connect(self.searchList)
            

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
